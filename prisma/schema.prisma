// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum SubmissionStatus {
  SUBMITTED
  PROCESSING
  ASSESSED
  GRADED
  RETURNED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole
  studentId String?
  institution String?
  subject   String?
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teachingClasses   Class[]      @relation("TeacherClasses")
  studentClasses    Class[]      @relation("StudentClasses")
  assignments       Assignment[]
  submissions       Submission[]

  @@map("users")
}

model Class {
  id          String   @id @default(cuid())
  name        String
  description String?
  teacherId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teacher     User           @relation("TeacherClasses", fields: [teacherId], references: [id], onDelete: Cascade)
  students    User[]         @relation("StudentClasses")
  assignments Assignment[]

  @@map("classes")
}

model Assignment {
  id           String   @id @default(cuid())
  title        String
  description  String
  instructions String?
  dueDate      DateTime
  fileFormats  String[] @default(["pdf", "docx", "pptx", "png", "jpg"])
  maxFileSize  Int      @default(10485760) // 10MB in bytes
  rubricConfig Json
  teacherId    String
  classId      String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  teacher     User         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  class       Class?       @relation(fields: [classId], references: [id], onDelete: SetNull)
  submissions Submission[]

  @@map("assignments")
}

model Submission {
  id           String           @id @default(cuid())
  assignmentId String
  studentId    String
  fileName     String
  filePath     String
  fileType     String
  fileSize     Int
  status       SubmissionStatus @default(SUBMITTED)
  submittedAt  DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  assignment  Assignment  @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student     User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assessments Assessment[]

  @@map("submissions")
}

model Assessment {
  id            String   @id @default(cuid())
  submissionId  String
  aiScore       Float?
  teacherScore  Float?
  finalScore    Float?
  feedback      Json?
  rubricScores  Json?
  confidence    Float?
  aiProcessedAt DateTime?
  gradedAt      DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("assessments")
}

model Rubric {
  id          String   @id @default(cuid())
  name        String
  description String?
  criteria    Json
  isTemplate  Boolean  @default(false)
  teacherId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("rubrics")
}